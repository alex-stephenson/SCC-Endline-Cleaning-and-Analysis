## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights, loa = loa)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/")
analysistools::check_loa(loa, SCC_endline_Survey_Design)
?check_loa
valid_loa <- loa %>%
filter(analysis_var %in% names(SCC_endline_Survey_Design$variables))
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices")
#loa_questions <- kobo_survey %>%
#  filter(str_detect(type, "select") | str_detect(type, "integer")) %>%
#  pull(name)
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights, loa = loa)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/")
?as_survey_design
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices")
#loa_questions <- kobo_survey %>%
#  filter(str_detect(type, "select") | str_detect(type, "integer")) %>%
#  pull(name)
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices")
#loa_questions <- kobo_survey %>%
#  filter(str_detect(type, "select") | str_detect(type, "integer")) %>%
#  pull(name)
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
results_table <- my_analysis$results_table
View(results_table)
kobo_survey <- kobo_survey %>%
filter(! type %in% c("calculate", "note", "calculate", "start", "end", "audit"))
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English (en)",
results_table = results_table)
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
review_kobo_labels_results
View(review_kobo_labels_results)
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct()
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices")
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct()
#loa_questions <- kobo_survey %>%
#  filter(str_detect(type, "select") | str_detect(type, "integer")) %>%
#  pull(name)
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
results_table <- my_analysis$results_table
## remove some issues highlighted in the review_kobo_labels
kobo_survey <- kobo_survey %>%
filter(! type %in% c("calculate", "note", "calculate", "start", "end", "audit"))
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
View(review_kobo_labels_results)
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?"))
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct()
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
View(review_kobo_labels_results)
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name)
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T)
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
View(review_kobo_labels_results)
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(!str_detect(name, " "))
main_data %>% distinct(settlement)
kobo_choice %>%
pull(name)
kobo_choice %>%
filter(list_name) %>%
pull(name)
kobo_choice %>%
filter(list_name == "Settlement") %>%
pull(name)
kobo_choice %>%
filter(list_name == "settlement") %>%
pull(name)
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(!str_detect(name, " "))
settlements <- kobo_choice %>%
filter(list_name == "settlement") %>%
pull(name)
main_data %>% filter(settlement %in% settlements) %>% dim()
main_data %>% dim()
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T)
main_data %>% distinct(settlement)
main_data %>% distinct(settlement) %>% print(n = 25)
kobo_choice
read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement)
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement)
View(kobo_choice)
kobo_choice %>% filter(list_name == "settlement")
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement)
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement)
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
results_table <- my_analysis$results_table
## remove some issues highlighted in the review_kobo_labels
kobo_survey <- kobo_survey %>%
filter(! type %in% c("calculate", "note", "calculate", "start", "end", "audit"))
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
View(review_kobo_labels_results)
kobo_survey %>% filter(list_name == "settlement" & `label::English` == "Bulsho IDP")
kobo_survey
kobo_choice %>% filter(list_name == "settlement" & `label::English` == "Bulsho IDP")
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement) %>%
filter(name != "Bulsho IDP")
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
review_kobo_labels_results
results_table_labeled <- add_label_columns_to_results_table(
results_table,
label_dictionary
)
label_dictionary <- create_label_dictionary(kobo_survey,
kobo_choice,
label_column = "label::English (en)",
results_table = results_table)
label_dictionary <- create_label_dictionary(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
results_table_labeled <- add_label_columns_to_results_table(
results_table,
label_dictionary
)
## this function pivots it wider so we have each analysis variable as a row and each group as a column
group_wide_results_table <- results_table_labeled %>%
create_table_variable_x_group()
## this function pivots it wider so we have each analysis variable as a row and each group as a column
group_wide_results_table <- results_table_labeled %>%
create_table_variable_x_group()
create_xlsx_variable_x_group(group_wide_results_table, file_path = "output/as_final_output/results_table_long.xlsx", overwrite = T)
## this one pivots wider so we have each group as a row and each analysis variable as a column
analysis_wide_results_table <- results_table_labeled %>%
create_table_group_x_variable()
create_xlsx_group_x_variable(analysis_wide_results_table, file_path = "output/as_final_output/results_table_wide.xlsx", overwrite = T)
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement) %>%
filter(name != "Bulsho IDP")
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement) %>%
filter(name != "Bulsho IDP")
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
results_table <- my_analysis$results_table
## remove some issues highlighted in the review_kobo_labels
kobo_survey <- kobo_survey %>%
filter(! type %in% c("calculate", "note", "calculate", "start", "end", "audit"))
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
label_dictionary <- create_label_dictionary(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
results_table_labeled <- add_label_columns_to_results_table(
results_table,
label_dictionary
)
## this function pivots it wider so we have each analysis variable as a row and each group as a column
group_wide_results_table <- results_table_labeled %>%
create_table_variable_x_group()
create_xlsx_variable_x_group(group_wide_results_table, file_path = "output/as_final_output/results_table_long.xlsx", overwrite = T)
## this one pivots wider so we have each group as a row and each analysis variable as a column
analysis_wide_results_table <- results_table_labeled %>%
create_table_group_x_variable()
create_xlsx_group_x_variable(analysis_wide_results_table, file_path = "output/as_final_output/results_table_wide.xlsx", overwrite = T)
deletion <- read_excel("output/final_output/final_output_for IRF_ENDLINE ANALYSIS.xlsx", sheet = "deletion")
combined_clogs <- read_excel("combined clogs/corrected_combined cleaning clogs.xlsx") %>%
filter(! uuid %in% deletion$uuid)
?create_xlsx_group_x_variable
create_xlsx_variable_x_group(group_wide_results_table, file_path = "output/as_final_output/results_table_long.xlsx", overwrite = T, write_file = F)
?create_xlsx_variable_x_group
raw_data <- read_excel("inputs/as_raw_data.xlsx") %>%
select(-savings)
deletion <- read_excel("inputs/as_raw_data.xlsx", sheet = "deletion")
deletion <- read_excel("inputs/as_raw_data.xlsx")
colnames(raw_data)
raw_data %>%
select(-(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
raw_data %>%
select(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
`_submission_time`, `_validation_status`, `_notes`, `_status`, `_submitted_by`, `__version__`, `_tags`, `_index`))
raw_data_no_pii <- raw_data %>%
select(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
`_submission_time`, `_validation_status`, `_notes`, `_status`, `_submitted_by`, `__version__`, `_tags`, `_index`)
raw_data <- read_excel("inputs/as_raw_data.xlsx") %>%
select(-savings)
raw_data %>%
select(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
`_submission_time`, `_validation_status`, `_notes`, `_status`, `_submitted_by`, `__version__`, `_tags`, `_index`)
raw_data %>%
select(!(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
?dplyr::all_of()
raw_data_no_pii <- raw_data %>%
select(-(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
raw_data_no_pii <- raw_data %>%
select(-(any_of(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
`_submission_time`, `_validation_status`, `_notes`, `_status`, `_submitted_by`, `__version__`, `_tags`, `_index`)))
raw_data_no_pii <- raw_data %>%
select(-any_of(start, end, today, deviceid, audit, enumerator_ID, resp_phone, resp_age,
`_submission_time`, `_validation_status`, `_notes`, `_status`, `_submitted_by`, `__version__`, `_tags`, `_index`))
cols_to_remove <- c("start", "end", "today", "deviceid", "audit", "enumerator_ID",
"resp_phone", "resp_age", "_submission_time", "_validation_status",
"_notes", "_status", "_submitted_by", "__version__", "_tags", "_index")
raw_data_no_pii <- raw_data %>%
select(-any_of(cols_to_remove))
main_data_no_pii <- main_data %>%
select(-any_of(cols_to_remove))
final_output <- list(raw_data = raw_data_no_pii, cleaned_data = main_data_no_pii, survey = kobo_survey, choices = kobo_choice, deletion = deletion, clogs = combined_clogs)
writexl::write_xlsx(final_output, "output/all_data_logbook.xlsx")
deletion <- read_excel("inputs/as_deletion_log.xlsx")
rm(list = ls())
library(tidyverse)
library(cleaningtools)
library(analysistools)
library(presentresults)
# write the aggregation file with a timestamp to more easily keep track of different versions
date_time_now <- format(Sys.time(), "%a_%b_%d_%Y_%H%M%S")
##############################################################################
########################## Load the Data and Survey ##########################
##############################################################################
# load datasets for processing
file_path <- "output/as_final_output/cleaned_data.xlsx"
main_data <- read_excel(file_path, 'cleaned_data')
raw_data <- read_excel("inputs/as_raw_data.xlsx") %>%
select(-savings)
## tool
kobo_tool_name <- "inputs/IRF_ENDLINE_TOOL_FEB2025.xlsx"
kobo_survey <- read_excel(kobo_tool_name, sheet = "survey") %>%
mutate(type = str_squish(type)) %>%
mutate(`label::English` = ifelse(
`label::English` == "If yes, which goods and commodity prices have increased?" & name == "community_price_goods", "If yes, which community goods and commodity prices have increased?", `label::English`))
kobo_choice <- read_excel(kobo_tool_name, sheet = "choices") %>%
distinct(list_name, name, .keep_all = T) %>%
filter(list_name != "settlement" | list_name == "settlement" & name %in% main_data$settlement) %>%
filter(name != "Bulsho IDP")
## load in the LOA
loa <- readxl::read_excel("inputs/analysis_loa_all_data.xlsx")
deletion <- read_excel("inputs/as_deletion_log.xlsx")
combined_clogs <- read_excel("combined clogs/corrected_combined cleaning clogs.xlsx") %>%
filter(! uuid %in% deletion$uuid)
############################### create HH survey design and analysis #################################################
#main_data_cols <- main_data %>%
#  select(any_of(contains(loa_questions)), weights)
SCC_endline_Survey_Design <- main_data %>%
srvyr::as_survey_design(., strata = "region", weights = weights)
my_analysis <- create_analysis(SCC_endline_Survey_Design, sm_separator = "/", loa = loa)
results_table <- my_analysis$results_table
## remove some issues highlighted in the review_kobo_labels
review_kobo_labels_results <- review_kobo_labels(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
label_dictionary <- create_label_dictionary(kobo_survey,
kobo_choice,
label_column = "label::English",
results_table = results_table)
results_table_labeled <- add_label_columns_to_results_table(
results_table,
label_dictionary
)
## this function pivots it wider so we have each analysis variable as a row and each group as a column
group_wide_results_table <- results_table_labeled %>%
create_table_variable_x_group()
create_xlsx_variable_x_group(group_wide_results_table, file_path = "output/as_final_output/results_table_long.xlsx", overwrite = T)
## this one pivots wider so we have each group as a row and each analysis variable as a column
analysis_wide_results_table <- results_table_labeled %>%
create_table_group_x_variable()
create_xlsx_group_x_variable(analysis_wide_results_table, file_path = "output/as_final_output/results_table_wide.xlsx", overwrite = T)
cols_to_remove <- c("start", "end", "today", "deviceid", "audit", "enumerator_ID",
"resp_phone", "resp_age", "_submission_time", "_validation_status",
"_notes", "_status", "_submitted_by", "__version__", "_tags", "_index", "audit_URL", )
kobo_choice %>% filter(type == "note")
kobo_survey %>% filter(type == "note")
kobo_survey %>% filter(type == "calculate")
cols_to_remove <- c("consent_no", "enumerator_sensitivity",   "start", "end", "today", "deviceid", "audit", "enumerator_ID",
"resp_phone", "resp_age", "_submission_time", "_validation_status",
"_notes", "_status", "_submitted_by", "__version__", "_tags", "_index", "audit_URL")
raw_data_no_pii <- raw_data %>%
select(-any_of(cols_to_remove))
main_data_no_pii <- main_data %>%
select(-any_of(cols_to_remove))
final_output <- list(raw_data = raw_data_no_pii, cleaned_data = main_data_no_pii, survey = kobo_survey, choices = kobo_choice, deletion = deletion, clogs = combined_clogs)
writexl::write_xlsx(final_output, "output/all_data_logbook.xlsx")
